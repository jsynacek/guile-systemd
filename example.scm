;;; Copyright © 2015 Jan Synáček <jan.synacek@gmail.com>
;;;
;;; scheme-systemd is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU Lesser General Public License as published by
;;; the Free Software Foundation; either version 2.1 of the License, or
;;; (at your option) any later version.

;; Since we're testing from the current directory, it has to be added
;; to the Guile's load path. If the module was properly installed,
;; the following line would be ommitted.
(add-to-load-path ".")

;; Load the journal module.
(use-modules (journal))

;; Helper function. It is not supposed to be run as an example.
(define (print-short-entry entry sec)
  (display (strftime "%b %d %T" (localtime sec))) (display " ")
  (display (assoc-ref entry "_HOSTNAME")) (display " ")
  (display (assoc-ref entry "SYSLOG_IDENTIFIER"))
  (display "[") (display (assoc-ref entry "_PID")) (display "]: ")
  (display (assoc-ref entry "MESSAGE"))
  (newline))

;; All the following functions are runnable without any arguments. Their purpose
;; is to demonstrate some basic usage of the scheme-systemd bindings.

(define (display-boot-id)
  "Display the current boot ID."
  (display (journal-boot-id)) (newline))

(define (display-journal-usage)
  "Display total journal usage in MiB."
  (let ((j (journal-open '(local-only))))
    (display (/ (journal-get-usage j) 1024 1024.0)) (newline)))


(define (send-message)
  "Send a simple hello message to the journal."
  (send! "Hello journal"))

(define (send-custom-message)
  "Send a message with custom fields to the journal."
  (send! "Error: your code is borked!"
         #:priority 3
         #:fields '(("CODE_FUNC" . "fix_all_software_procedure")
                    ("CODE_LINE" . 1))))

(define (display-polkit-or-current-boot)
  "Display all messages of the current boot, plus all messages from
all boots generated by the polkit service."
  (let ((j (journal-open '(local-only))))
    (journal-add-match j (current-boot-match))
    (journal-add-disjunction j)
    (journal-add-match j "_SYSTEMD_UNIT=polkit.service")
    (while (> (journal-next j) 0)
      (print-short-entry (journal-enumerate-entry j)
                         (floor (/ (journal-get-realtime-usec j)
                                   1000000))))))

(define* (dump-journal #:optional matches)
  "Dump local journal.

Prints all journal entries and their respective metadata. List of MATCHES can
optionally be specified to use filtering.

Caution! This can take a significant amount of time, depending on the amount
of data.

Examples:
;; Dump the entire journal.
(dump-journal)

;; Dump entries of the current boot.
(dump-journal (list (current-boot-match)))
"
  (define (display-entry entry)
    (display "ENTRY:::") (newline)
    (for-each (lambda (cell)
                (format #t "  ~a ==> ~a" (car cell) (cdr cell))
                (newline))
              entry))

  (let ((j (journal-open '(local-only))))
    (when matches
      (for-each (lambda (match)
                  (journal-add-match j match))
                matches))
    (while (> (journal-next j) 0)
      (display-entry (journal-enumerate-entry j)))))

(define (journalctl-b)
  "Simulate 'journalctl -b --no-pager' system command."
  (let ((j (journal-open '(local-only))))
    (journal-add-match j (current-boot-match))
    (while (> (journal-next j) 0)
      (print-short-entry (journal-enumerate-entry j)
                         (floor (/ (journal-get-realtime-usec j)
                                   1000000))))))

